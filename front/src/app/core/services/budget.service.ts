// ‚úÖ Importamos Axios, la librer√≠a usada para hacer peticiones HTTP al backend.
import axios from 'axios';

// ‚úÖ Importamos el modelo `Budget` para tipar correctamente las respuestas.
import { Budget } from '../models/budget.model';

/**
 * üîß Definici√≥n de las URLs base del backend.
 * 
 * `BASE_URL` apunta a la API principal.
 * A partir de ella, construimos endpoints espec√≠ficos para los presupuestos (budgets)
 * y para la exportaci√≥n en PDF.
 */
const BASE_URL = 'http://localhost:8080/api';
const BUDGET_URL = `${BASE_URL}/budgets`;
const EXPORT_URL = `${BASE_URL}/export/pdf`;

/**
 * ‚úÖ Servicio de presupuestos
 * 
 * Contiene m√©todos as√≠ncronos que gestionan las operaciones CRUD relacionadas con
 * los presupuestos (`budgets`), as√≠ como la exportaci√≥n de presupuestos en formato PDF.
 */
export const BudgetService = {
  /**
   * üì• Obtiene todos los presupuestos almacenados en el backend.
   * 
   * - Utiliza `axios.get()` para hacer una solicitud GET al endpoint `/api/budgets`.
   * - Tipamos la respuesta como un array de `Budget[]`.
   * - Retorna directamente el `data` de la respuesta HTTP.
   */
  getAll: async () => (await axios.get<Budget[]>(BUDGET_URL)).data,

  /**
   * üìù Crea un nuevo presupuesto.
   * 
   * - Recibe un objeto `Budget` como par√°metro (enviado desde el front).
   * - Env√≠a el presupuesto al backend mediante una solicitud POST a `/api/budgets`.
   * - Retorna el objeto `Budget` que el backend haya guardado (incluyendo su nuevo `id`).
   */
  create: async (data: Budget) => (await axios.post<Budget>(BUDGET_URL, data)).data,

  /**
   * üìÑ Exporta un presupuesto a PDF y lo abre autom√°ticamente en una nueva pesta√±a.
   * 
   * - Llama al endpoint `/api/export/pdf/{id}` pasando el ID del presupuesto.
   * - Usa `responseType: 'blob'` para recibir el archivo binario (PDF).
   * - Crea un objeto URL temporal (`createObjectURL`) que representa el PDF en memoria.
   * - Abre el PDF en una nueva pesta√±a del navegador (`window.open`).
   * - Retorna el blob por si se quiere usar en otra parte (descargar manualmente, etc.).
   */
  exportPdf: async (id: number) => {
    const response = await axios.get(`${EXPORT_URL}/${id}`, {
      responseType: 'blob', // ‚ö†Ô∏è Importante: necesario para recibir binarios (PDF)
    });

    // ‚úÖ Genera una URL temporal con el contenido binario del PDF
    const fileURL = window.URL.createObjectURL(response.data);

    // ‚úÖ Abre el PDF en una nueva pesta√±a del navegador
    window.open(fileURL, '_blank');

    // ‚úÖ Retorna el archivo binario (√∫til si luego queremos guardarlo o mostrarlo embebido)
    return response.data;
  },
};
